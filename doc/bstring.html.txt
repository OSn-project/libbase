<h1>The BString Class</h1>
The BString class aims to simplify string manipulation for the programmer.
A BString is just a wrapper around a null-terminated char array and should be treated as such.<br/>
A pointer to the internal char array can be obtained by calling the `->c_str()` method.
BStrings were inspired by Python strings.

<h3>Class Declaration</h3>
	class BString
	{
	protected:
		char  *string;
		
		size_t m_size;
		
		uint32 __reserved1[4];
		
	public:
		bool utf8;
		
		BString();
		BString(const char* str, bool utf8 = false, int32 limit = -1);
		BString(const BString& str);
		
		~BString();
		
		bool set(const char *str);
		
		int32 length();
		
		size_t size();
		size_t utf8_size(int32 from, int32 to);

		BString **split(char delim);
		static void tuple_free(BString **tuple);
		
		bool        append(char *str, size_t str_size);
		inline bool append(char *str);
		inline bool append(BString *str);
		bool        prepend(char *str, size_t str_size);
		inline bool prepend(char *str);
		inline bool prepend(BString *str);
		bool        insert(char *str, size_t str_size, int32 offset);
		inline bool insert(char *str, int32 offset);
		inline bool insert(BString *str, int32 offset);
		
		BString *uppercase();
		BString *lowercase();
		
		bool        equals(char *str, size_t str_size);
		inline bool equals(char *str);
		inline bool equals(BString *str);
		
		void remove(int32 start, int32 length);
		void remove(const char *start, const char *end);
		void remove_char(char chr);
		
		int32 count(char chr);
		int32 count_chars(const char *chr);
		int32 index_of (char chr, const char *start = NULL);
		int32 index_of_utf8 (const char *chr, const char *start = NULL);
		int32 offset_of(char chr, const char *start = NULL);
		int32 offset_of_utf8(const char *chr, const char *start = NULL);
		
		const char        *first(char chr);
		static const char *next (char chr, const char *start);
		
		int32 offset_of_ptr(const char *str);
		const char *char_at(int32 index);
		
		inline const char *c_str();

		/* File access */
		static BString *load_file(const char *path);
		static BString *load_file(FILE *file, int32 bytes = -1, size_t chunk_size = 256);
		bool            save_file(const char *path);
		bool            save_file(FILE *file);

		/* Static helper functions */

	private:
	};

<h3>Initialization</h3>
A BString can be either constructed empty, or initialized with data.
Here you can see two different ways of initializing BStrings:

	BString name("Alex");
	BString *speech = new BString("'Isn't', he said.");

As with any other heap-allocated C++ object, don't forget to free the memory of the second string (using `delete`) once you are done using it.

You can also initialize a BString to the content of another BString:

	BString name("Alex");
	BString name_copy(name);

<h3>UTF-8 Support</h3>
BStrings have support for UTF-8, although it is disabled by default.<br/>
If your string contains UTF-8 characters, you can enable UTF-8 support by setting the `->utf8` variable to `true`.
In this example, we see how the return value of some methods differs depending on whether UTF-8 is enabled or not.

	BString text("Санкт-Петербургская классическая гимназия");

	printf("%d\n", text.length());
	text->utf8 = true;
	printf("%d\n", text.length());

The following code produces:

	79
	41

With UTF-8 disabled, the `->length()` method expects one byte per character (ASCII/ANSI), and therefore returns the size of the string in bytes. 
This, however, is a false result since the string is not 79 characters long.
Enabling UTF-8 support causes the `->length()` method to count each character separately, and return the correct length of 41 characters.

<div id="info"><b>Note:</b> If you intentionally want to get the string's size in bytes, you should use the `->size()` method.</div>

A BString's constructor can also be overloaded to enable UTF-8 upon creation:

	BString text("Санкт-Петербургская классическая гимназия", true);


<h3>File Access</h3>
BStrings have four methods to simplify file I/O:

	static BString *load_file(const char *path);
	static BString *load_file(FILE *file, int32 bytes = -1, size_t chunk_size = 256);
	bool            save_file(const char *path);
	bool            save_file(FILE *file);

To read and write a text file, you use the `::load_file()` and `->save_file()` functions, which take the file's path as an argument.
The following code loads a text file, makes all the letters uppercase, and then saves the text into the original file:

	BString *contents = BString::load_file("myfile.txt");
	BString *contents_uppercase = contents->uppercase();

	contents_uppercase->save_file("myfile.txt");

	delete contents;
	delete contents_uppercase;

`BString::load_file()` returns a new instance of a BString and is a <i>static function</i>, meaning that although it is inside the BString class it is more like a normal function and can be called without any prior instances of a BString existing.<br/>
If there is an error reading the file, `BString::load_file()` returns `NULL`. Similarly, `BString->save_file()` returns the boolean value `false` to indicate an error while writing and otherwise returns `true`.
Therefore, a bullet-proof version of our code may look something like this:

	BString *contents = BString::load_file("myfile.txt");
	if (contents == NULL) { fprintf(stderr, "Error loading myfile.txt!\n"); return; }
	BString *contents_uppercase = contents->uppercase();

	bool rc = contents_uppercase->save_file("myfile.txt");
	if (rc == false) { fprintf(stderr, "Error saving myfile.txt!\n"); return; }

	delete contents;
	delete contents_uppercase;

<div id="info"><b>Warning:</b> Loading a binary file into a BString is not reccommended as it may result in strange behavior.</div>

<h4>File Pointers</h4>
The two aforementioned functions can also be overloaded with `FILE *` pointers to already open files.

The overloaded `::load_file()` function also has additional optional arguments:

	static BString *load_file(FILE *file, int32 bytes = -1, size_t chunk_size = 256);

`bytes` causes the function to read only the <i>n</i> first bytes of the file. A value of `-1` indicates to read until the end of the file.<br/>
`chunk_size` changes the size by which the internal buffer to which the file is read grows every time it is filled up. By default, the buffer is reallocated every 256 bytes. Reading a 14-byte file with a chunk-size of 256 will cause 242 surplus bytes to be left allocated (however this is a trivial issue).<br/>
The function stops reading if it reaches a null-byte.

<h3>Constructors</h3>
